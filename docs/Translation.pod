=head1 INTRODUCTION

The translation system in Zonemaster is a two-step process, where internal
message tags are first translated to English strings with argument
placeholders, and a second step where GNU gettext is used to translate the
strings to other languages and fill in the placeholders based on provided data.

All translation files live in the F<share> directory in the
L<Zonemaster::Engine> source directory and all commands described here are
executed from that directory.

=head1 FOR DEVELOPERS OF ZONEMASTER TEST MODULES

Your test code should produce log messages with message tags, as documented
elsewhere. These tags will be used for translation to human language, for
determining the severity of the even logged and to make the events easily used
by other software.

Each test module must also have a method named C<tag_descriptions()>.
This method must return a reference to a hash whose entries are expected to look
like this, where C<FRIENDLY_GREETING> is a message tag and C<"Hello, {name}!">
is a message id:

    FRIENDLY_GREETING => sub {
        __x    # FRIENDLY_GREETING
          "Hello, {name}!", @_;
    },

A number of things are important here.
Keys in the hashref are message tags and values are coderefs.
The coderef calls Locale::TextDomain::__x() with a Perl brace format string
(a.k.a. message id) and passes along its own @_).
The coderef propagates the return value of Locale::TextDomain::__x().
The line immediately before the format string contains a comment consisting of
the message tag.

The format strings themselves, the message tag comments and the line numbers of
the __x calls are used by the gettext tooling when updating the PO files with
new message ids and old message strings.

Every time you add, remove or modify a tag or its message id, re-run
C<make update-po> as descibed in the next section.
Make sure the message tag comments are properly added and up to date.

=head1 FOR TRANSLATORS

The first step in updating the translations is to generate a new template file
(F<Zonemaster-Engine.pot>).
In practice you rarely need to think about generating it as it is generally
performed as an implicit intermediate step.
If you do want to generate it, the command is C<make extract-pot>.

The translated strings are maintained in files named C<{language_code}.po> (e.g.
F<en.po>, F<sv.po> or F<fr.po>).
Execute C<make update-po> to update these files with new message ids from the
source code (C<make extract-pot> will be infoked behind the scenes).
This should only be necessary to do when a developer has added or changed a test
module.

By default C<make update-po> suggests translations for new message ids based on
fuzzy matching of similar strings.
This is not always desirable and you can disable fuzzy matching by executing
C<make update-po MSGMERGE_OPTS=--no-fuzzy-mathing> instead.

In order to make a new translation usable, it must be compiled to C<mo> format
and installed. The first step needs the C<msgfmt> program from the GNU gettext
package to be installed and available in the shell path. As long as it is, it
should be enough to go to the F<share> directory and run C<make>.

For the new translation to actually be installed, the C<mo> file must be added
to the F<MANIFEST> file. At the end of the C<make> run, it should have printed
a list of all the paths that has to be there. Just open F<MANIFEST> in a text
editor, check that all the lines are in there and add any that are missing (if
you just added a new translation, that will be missing, for example).

Once the new translation is compiled and added to F<MANIFEST>, the normal Perl
C<make install> process will install it.

Don't forget to commit the new C<po> files to git.
